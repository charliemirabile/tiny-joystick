<style>input[type=text]{width:20px}</style>

<select id=webMidiSelect></select><br><br>

Synth Bend Range : <input id=pitchBendRange type=text value=3 oninput='window.bendRange=parseFloat(this.value)'><br><br>

<input type=button value='Toggle calibration mode' onclick='toggleCalibrationMode();'>

<div style="width:1024px;">
<input type=text value=-3  oninput='window.bend1=parseFloat(this.value)'>
<input type=text value=2 oninput='window.bend2=parseFloat(this.value)' style="float:right">

<br>
<canvas id=c width=1024 height=110 style='border:1px solid black;position:relative'></canvas> 
<br>

<input type=text value=-1 oninput='window.bend3=parseFloat(this.value)'>
<input type=text value=-2 oninput='window.bend4=parseFloat(this.value)' style="float:right">
</div>

<pre id=raw></pre>
<pre id=json></pre>

<br><br>
<input type=button value=Calculate onclick='calculate()'>
<br><br>
<input type=button value='Write To Device' onclick='writeToDevice();'>

<script>
selectMIDI=document.getElementById("webMidiSelect");

document.querySelectorAll('input[oninput]').forEach(x=>x.oninput());



ADC0 = [190 , 480 , 577 , 834 ] ;
ADC1 = [184 , 499 , 542 , 844 ] ;


function calculate(){
  


  voltages = [ ADC0[1], ADC0[2], ADC1[1], ADC1[2] ];
  bendAmount=[];
  limits=[];


//val1 sideways 190 - 480 - 577 - 834 
//val2 lengthways 184 - 499 - 542 - 844

  full = (1<<14);
  semitone = full/2 /window.bendRange ;

  bendAmount[0] = semitone * window.bend1 / (ADC0[1]-ADC0[0]);  //-34.13333333333333;
  bendAmount[1] =-semitone * window.bend2 / (ADC0[3]-ADC0[2]) ; // -22.755555555555553;
  bendAmount[2] = semitone * window.bend3 / (ADC1[1]-ADC1[0]) ; // -9.416091954022988;
  bendAmount[3] =-semitone * window.bend4 / (ADC1[3]-ADC1[2]) ; // 19.504761904761903;

  limits[0] = Math.round(semitone * window.bend1);
  limits[1] = Math.round(semitone * window.bend2);
  limits[2] = Math.round(semitone * window.bend3);
  limits[3] = Math.round(semitone * window.bend4);


  eep=[];
  eep = eep.concat( dec_to_IEEE754(bendAmount[0]), dec_to_IEEE754(bendAmount[1]), dec_to_IEEE754(bendAmount[2]), dec_to_IEEE754(bendAmount[3]) )
  eep = eep.concat( int16_t(voltages[0]), int16_t(voltages[1]), int16_t(voltages[2]), int16_t(voltages[3]) )
  eep = eep.concat( int16_t(limits[0]), int16_t(limits[1]), int16_t(limits[2]), int16_t(limits[3]) )
  


  //json.innerHTML = 'ADC0 = '+JSON.stringify(ADC0)+' ; ADC1 = '+JSON.stringify(ADC1)+' ;';
  hex="";
  for (i=0;i<eep.length;i++) hex+=("0"+eep[i].toString(16).toUpperCase()).substr(-2)+" ";
  json.innerHTML=hex + "\n" + JSON.stringify(bendAmount);
}

function writeToDevice(){
  calculate();
  sendSysEx(eep);
}

function int16_t(n){
  if (n<0) n+=256*256
  return [ n&0xFF, n>>8 ];
}

function dec_to_IEEE754(n){
  sign = n<0?'1':'0'; n=Math.abs(n);

  if (n<1) return;

  left =     Math.floor(n).toString(2).substring(1);
  right = (n-Math.floor(n)).toString(2).substring(2);

  exponent = (left.length +127).toString(2);

  f = (sign + exponent + left + right + '000000000000000000000000');

  
  var i=32;
  while (f.substring(i,i+1) =='1' &&i) {
    if (f.substring(i-1,i) =='0') {f=f.substring(0,i-1)+'1'+f.substring(i); break;}
    else i--;
  }


  f=f.substring(0,32);
  
  h = parseInt(f,2).toString(16).split('');

  return [parseInt(h[6]+h[7],16), parseInt(h[4]+h[5],16), parseInt(h[2]+h[3],16), parseInt(h[0]+h[1],16) ]
//  return [ parseInt(h[0]+h[1],16), parseInt(h[2]+h[3],16), parseInt(h[4]+h[5],16), parseInt(h[6]+h[7],16)  ]
}


raw=document.getElementById('raw');
json=document.getElementById('json');
c=document.getElementById('c');
ctx=c.getContext('2d');
ctx.textAlign="center"; 
function draw(v1,v2){
  ctx.fillStyle='rgba(255,255,255,0.4)'
  ctx.fillRect(0,0,1024,200);
  ctx.fillStyle='rgb(100,100,100)'

  ctx.strokeStyle='rgb(200,200,200)'
  ctx.beginPath();
  for (var i=0;i<1024;i+=8) {
    ctx.moveTo(i+0.5,50),ctx.lineTo(i+0.5,55);
    ctx.moveTo(i+0.5,22.5),ctx.lineTo(i+0.5,27.5);
    ctx.moveTo(i+0.5,77.5),ctx.lineTo(i+0.5,82.5);
  }
  for (var i=0;i<1024;i+=64) {
    ctx.moveTo(i+0.5,45),ctx.lineTo(i+0.5,55);
    ctx.fillText(i,i,65);
  }
  ctx.fillText(i,i,65);

  ctx.moveTo(0,55.5),ctx.lineTo(1024,55.5);
  ctx.moveTo(0,27.5),ctx.lineTo(1024,27.5);
  ctx.moveTo(0,82.5),ctx.lineTo(1024,82.5);
  ctx.stroke();


  ctx.fillStyle='rgba(40,40,40,1)'
  drawDiamond(v1,27.5);
  drawDiamond(v2,82.5);

  ctx.fillStyle='rgba(255,255,0,0.1)'
  ctx.fillRect(ADC0[0],0,ADC0[1]-ADC0[0],55);
  ctx.fillRect(ADC0[2],0,ADC0[3]-ADC0[2],55);
  ctx.fillRect(ADC1[0],55,ADC1[1]-ADC1[0],110);
  ctx.fillRect(ADC1[2],55,ADC1[3]-ADC1[2],110);

  ctx.strokeStyle='rgb(128,128,0)'
  ctx.beginPath()
  for (var i=0;i<4;i++) {
    ctx.moveTo(ADC0[i],0);ctx.lineTo(ADC0[i],55);
    ctx.moveTo(ADC1[i],55);ctx.lineTo(ADC1[i],110);
  }
  ctx.stroke();

  raw.innerHTML= v1 + " , " + v2;
}
function drawDiamond(x,y){
  ctx.beginPath();
  ctx.moveTo(x,y+10);
  ctx.lineTo(x+10,y);
  ctx.lineTo(x,y-10);
  ctx.lineTo(x-10,y);
  ctx.fill();
}



c.onmousedown=function(e){
  var affect = e.offsetY>55? ADC1:ADC0;
  var n=1500, d, nearest=0;
  for (var i=0;i<4;i++) {
    d = Math.abs(affect[i]-e.offsetX);
    if (d<n) nearest=i, n=d;
  }
  if (n>64) return;


  c.style.cursor='col-resize';
  (c.onmousemove=function(e){
     affect[nearest]=e.offsetX;
     json.innerHTML = 'ADC0 = '+JSON.stringify(ADC0)+' ; ADC1 = '+JSON.stringify(ADC1)+' ;';
  })(e);
  c.onmouseout=c.onmouseup=function(){
    c.onmousemove=null;
    c.onmouseup=null;
    c.onmouseout=null;
    c.style.cursor='';
  }
}

function midiMessageReceived(d){
  if (d.data[0]==254) return; // active sense

  if (d.data[0]==0xE0) drawTemp(d);

  if (d.data[0]==0xE1) {val1 = ((d.data[2]<<7) + (d.data[1]));}
  if (d.data[0]==0xE2) {val2 = ((d.data[2]<<7) + (d.data[1])); draw(val1,val2);}


}
drawTemp=function(d){ n=((d.data[2]<<7) + (d.data[1])); json.innerHTML = n + "("+((100*n/2**13)-100).toFixed(2)+"%)"};

midiOut=null;
midiIn=null;
function populateMIDIInSelect() {
  selectMIDI.options.length = 0;
  
  midiAccess.outputs.forEach( function(i) {

    midiOut=i;
    selectMIDI.appendChild(new Option(i.name,i.id,midiOut==i,midiOut==i));
    
  });

  midiAccess.inputs.forEach( function(i) {
    //selectMIDI.appendChild(new Option(i.name,i.id,midiIn==i,midiIn==i));
    if (i.name == midiOut.name) midiIn=i;
  });
  if (midiIn) midiIn.onmidimessage = midiMessageReceived;
  
  //if (midiIn&&midiIn.state=="disconnected") selectMIDI.onchange();
}

window.addEventListener("load",function() {
  if (navigator.requestMIDIAccess) navigator.requestMIDIAccess({"sysex": true}).then( function(midi) {
       
    midiAccess = midi;

    (midi.onstatechange = populateMIDIInSelect)();
    (selectMIDI.onchange = function() {
       //if (midiIn) midiIn.onmidimessage = null;

       //if (selectMIDI.options.length) midiIn = midiAccess.inputs.get(2)//(selectMIDI[selectMIDI.selectedIndex].value);
       //if (midiIn) midiIn.onmidimessage = midiMessageReceived;
    })();
    //midiOut=midiAccess.outputs.get(0);

    //midiOut.send( [ 0xB0, 101, 0, 0xB0, 100, 0, 0xB0, 6, 3 ] );

  });
});

function sendSysEx( data ){

d = [ 0xF0, 0x12, 0x34 ]

for (var i=0;i<data.length;i+=2) {
  
  d.push(  (data[i]&0x80?1:0) + (data[i+1]&0x80?2:0) )
  d.push( data[i]&0x7F )
  d.push( data[i+1]&0x7F )

}
d.push(0xF7);
console.log(d);

midiOut.send( d );

}

function toggleCalibrationMode(){
  midiOut.send( [ 0xF0, 0x12, 0x35, 0xF7 ] )
}

</script>